/*
 * This file is generated by jOOQ.
*/
package com.sukitsuki.bot.jooq.game.tables;


import com.sukitsuki.bot.jooq.game.Game;
import com.sukitsuki.bot.jooq.game.Keys;
import com.sukitsuki.bot.jooq.game.tables.records.PartyRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Party extends TableImpl<PartyRecord> {

    private static final long serialVersionUID = -611503347;

    /**
     * The reference instance of <code>game.party</code>
     */
    public static final Party PARTY = new Party();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PartyRecord> getRecordType() {
        return PartyRecord.class;
    }

    /**
     * The column <code>game.party.party_id</code>.
     */
    public final TableField<PartyRecord, Integer> PARTY_ID = createField("party_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>game.party</code> table reference
     */
    public Party() {
        this("party", null);
    }

    /**
     * Create an aliased <code>game.party</code> table reference
     */
    public Party(String alias) {
        this(alias, PARTY);
    }

    private Party(String alias, Table<PartyRecord> aliased) {
        this(alias, aliased, null);
    }

    private Party(String alias, Table<PartyRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Game.GAME;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<PartyRecord> getPrimaryKey() {
        return Keys.PARTY_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<PartyRecord>> getKeys() {
        return Arrays.<UniqueKey<PartyRecord>>asList(Keys.PARTY_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Party as(String alias) {
        return new Party(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Party rename(String name) {
        return new Party(name, null);
    }
}
